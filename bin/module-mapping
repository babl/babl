#!/usr/bin/env ruby

require 'active_support/core_ext/string'
require 'net/http'
require 'json'


uri = URI('https://babl.sh/api/modules')
modules = JSON.parse(Net::HTTP.get(uri))

modules_by_owner = modules.inject({}) do |h, mod|
  h[mod['owner']] ||= []
  h[mod['owner']] << mod['name'] if mod['type'] == 'babl'
  h[mod['owner']].sort!
  h
end


contents = %{\
// Code generated by bin/module-mapping
// DO NOT EDIT!

package babl

import (
	grpc "google.golang.org/grpc"

}

modules_by_owner.each do |(owner, _)|
  contents += %{\
	#{owner} "github.com/larskluge/babl/protobuf/modules/#{owner}"
}
end

contents += %<\
)


var Modules = map[string]Component{
>

modules_by_owner.each do |(owner, mods)|
  mods.each do |mod|
    cc = mod.gsub('-', '_').gsub(/(\d+)/, "\t\\1\t").split("\t").map(&:camelize).join

    contents += %<\
	"#{owner}/#{mod}": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(#{owner}.New#{cc}Client(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			#{owner}.Register#{cc}Server(s, srv)
		},
  },
>
  end
end

contents += %<\
}
>

puts contents
