#!/usr/bin/env ruby

require 'yaml'
require 'active_support/core_ext/string'


config_path = File.expand_path('../../config.yml', __FILE__)
conf = YAML.load(File.read(config_path))

protobuf_path = File.expand_path('../../protobuf', __FILE__)
babl_proto_path = File.expand_path('babl.proto', protobuf_path)


contents = %{\
// Code generated by bin/module-mapping
// source: config.yml
// DO NOT EDIT!

package babl

import (
	grpc "google.golang.org/grpc"

}

conf.each do |(user, data)|
  next if data['modules'].empty?
  contents += %{\
	#{user} "github.com/larskluge/babl/protobuf/modules/#{user}"
}
end

contents += %<\
)


var Modules = map[string]Component{
>

conf.each do |(user, data)|
  mods = data['modules']
  next if mods.empty?
  mods.each do |mod|
    cc = mod.gsub('-', '_').gsub(/(\d+)/, "\t\\1\t").split("\t").map(&:camelize).join

    contents += %<\
	"#{user}/#{mod}": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(#{user}.New#{cc}Client(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			#{user}.Register#{cc}Server(s, srv)
		},
  },
>
  end
end

contents += %<\
}
>

puts contents
