#!/usr/bin/env ruby

protobuf_path = File.expand_path('../../protobuf', __FILE__)
babl_proto_path = File.expand_path('babl.proto', protobuf_path)


defs = File.read(babl_proto_path)
modules = defs.scan(/^service\s+(.+)\s+{\s*$/).flatten

names = modules.map do |m|
  {
    class: m,
    var: m.sub(/^./) { |s| s.downcase },
    id: m.gsub(/(.)([A-Z])/,'\1-\2').downcase,
  }
end


puts %{\
// Code generated by bin/module-mapping
// source: babl.proto
// DO NOT EDIT!

package babl

import (
	grpc "google.golang.org/grpc"
)
}

names.each do |n|
  puts %{
func New#{n[:class]}Client2(cc *grpc.ClientConn) BinaryClient {
	return &#{n[:var]}Client{cc}
}
func Register#{n[:class]}Server2(s *grpc.Server, srv BinaryServer) {
	s.RegisterService(&_#{n[:class]}_serviceDesc, srv)
}
}
end

puts %|
var Modules = map[string]Component{
|

names.each do |n|
  puts %|\
	"#{n[:id]}": Component{Client: New#{n[:class]}Client2, Server: Register#{n[:class]}Server2},
|
end

puts "}"
