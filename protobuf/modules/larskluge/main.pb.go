// Code generated by protoc-gen-go.
// source: github.com/larskluge/babl/protobuf/modules/larskluge/main.proto
// DO NOT EDIT!

/*
Package babl_larskluge is a generated protocol buffer package.

It is generated from these files:
	github.com/larskluge/babl/protobuf/modules/larskluge/main.proto

It has these top-level messages:
*/
package babl_larskluge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import babl "github.com/larskluge/babl/protobuf/messages"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BablBuild service

type BablBuildClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type bablBuildClient struct {
	cc *grpc.ClientConn
}

func NewBablBuildClient(cc *grpc.ClientConn) BablBuildClient {
	return &bablBuildClient{cc}
}

func (c *bablBuildClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablBuild/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bablBuildClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablBuild/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BablBuild service

type BablBuildServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterBablBuildServer(s *grpc.Server, srv BablBuildServer) {
	s.RegisterService(&_BablBuild_serviceDesc, srv)
}

func _BablBuild_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablBuildServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BablBuild_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablBuildServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BablBuild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.BablBuild",
	HandlerType: (*BablBuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _BablBuild_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BablBuild_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for BablDeploy service

type BablDeployClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type bablDeployClient struct {
	cc *grpc.ClientConn
}

func NewBablDeployClient(cc *grpc.ClientConn) BablDeployClient {
	return &bablDeployClient{cc}
}

func (c *bablDeployClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablDeploy/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bablDeployClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablDeploy/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BablDeploy service

type BablDeployServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterBablDeployServer(s *grpc.Server, srv BablDeployServer) {
	s.RegisterService(&_BablDeploy_serviceDesc, srv)
}

func _BablDeploy_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablDeployServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BablDeploy_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablDeployServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BablDeploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.BablDeploy",
	HandlerType: (*BablDeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _BablDeploy_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BablDeploy_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for BablInitModule service

type BablInitModuleClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type bablInitModuleClient struct {
	cc *grpc.ClientConn
}

func NewBablInitModuleClient(cc *grpc.ClientConn) BablInitModuleClient {
	return &bablInitModuleClient{cc}
}

func (c *bablInitModuleClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablInitModule/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bablInitModuleClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.BablInitModule/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BablInitModule service

type BablInitModuleServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterBablInitModuleServer(s *grpc.Server, srv BablInitModuleServer) {
	s.RegisterService(&_BablInitModule_serviceDesc, srv)
}

func _BablInitModule_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablInitModuleServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BablInitModule_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BablInitModuleServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BablInitModule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.BablInitModule",
	HandlerType: (*BablInitModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _BablInitModule_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BablInitModule_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Bar service

type BarClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type barClient struct {
	cc *grpc.ClientConn
}

func NewBarClient(cc *grpc.ClientConn) BarClient {
	return &barClient{cc}
}

func (c *barClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.Bar/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.Bar/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bar service

type BarServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterBarServer(s *grpc.Server, srv BarServer) {
	s.RegisterService(&_Bar_serviceDesc, srv)
}

func _Bar_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BarServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bar_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BarServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Bar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _Bar_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Bar_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Baz service

type BazClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type bazClient struct {
	cc *grpc.ClientConn
}

func NewBazClient(cc *grpc.ClientConn) BazClient {
	return &bazClient{cc}
}

func (c *bazClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.Baz/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bazClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.Baz/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Baz service

type BazServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterBazServer(s *grpc.Server, srv BazServer) {
	s.RegisterService(&_Baz_serviceDesc, srv)
}

func _Baz_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BazServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Baz_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BazServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Baz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.Baz",
	HandlerType: (*BazServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _Baz_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Baz_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Download service

type DownloadClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type downloadClient struct {
	cc *grpc.ClientConn
}

func NewDownloadClient(cc *grpc.ClientConn) DownloadClient {
	return &downloadClient{cc}
}

func (c *downloadClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.Download/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.Download/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Download service

type DownloadServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterDownloadServer(s *grpc.Server, srv DownloadServer) {
	s.RegisterService(&_Download_serviceDesc, srv)
}

func _Download_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DownloadServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Download_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DownloadServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Download_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.Download",
	HandlerType: (*DownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _Download_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Download_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Foo service

type FooClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type fooClient struct {
	cc *grpc.ClientConn
}

func NewFooClient(cc *grpc.ClientConn) FooClient {
	return &fooClient{cc}
}

func (c *fooClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.Foo/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.Foo/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Foo service

type FooServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterFooServer(s *grpc.Server, srv FooServer) {
	s.RegisterService(&_Foo_serviceDesc, srv)
}

func _Foo_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FooServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Foo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FooServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Foo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.Foo",
	HandlerType: (*FooServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _Foo_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Foo_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for ImageResize service

type ImageResizeClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type imageResizeClient struct {
	cc *grpc.ClientConn
}

func NewImageResizeClient(cc *grpc.ClientConn) ImageResizeClient {
	return &imageResizeClient{cc}
}

func (c *imageResizeClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.ImageResize/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageResizeClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.ImageResize/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageResize service

type ImageResizeServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterImageResizeServer(s *grpc.Server, srv ImageResizeServer) {
	s.RegisterService(&_ImageResize_serviceDesc, srv)
}

func _ImageResize_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ImageResizeServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ImageResize_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ImageResizeServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ImageResize_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.ImageResize",
	HandlerType: (*ImageResizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _ImageResize_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ImageResize_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for RenderWebsite service

type RenderWebsiteClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type renderWebsiteClient struct {
	cc *grpc.ClientConn
}

func NewRenderWebsiteClient(cc *grpc.ClientConn) RenderWebsiteClient {
	return &renderWebsiteClient{cc}
}

func (c *renderWebsiteClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.RenderWebsite/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderWebsiteClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.RenderWebsite/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RenderWebsite service

type RenderWebsiteServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterRenderWebsiteServer(s *grpc.Server, srv RenderWebsiteServer) {
	s.RegisterService(&_RenderWebsite_serviceDesc, srv)
}

func _RenderWebsite_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RenderWebsiteServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RenderWebsite_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RenderWebsiteServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RenderWebsite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.RenderWebsite",
	HandlerType: (*RenderWebsiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _RenderWebsite_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RenderWebsite_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for S3 service

type S3Client interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type s3Client struct {
	cc *grpc.ClientConn
}

func NewS3Client(cc *grpc.ClientConn) S3Client {
	return &s3Client{cc}
}

func (c *s3Client) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.S3/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3Client) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.S3/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S3 service

type S3Server interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterS3Server(s *grpc.Server, srv S3Server) {
	s.RegisterService(&_S3_serviceDesc, srv)
}

func _S3_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(S3Server).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _S3_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(S3Server).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _S3_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.S3",
	HandlerType: (*S3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _S3_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _S3_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for StringAppend service

type StringAppendClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type stringAppendClient struct {
	cc *grpc.ClientConn
}

func NewStringAppendClient(cc *grpc.ClientConn) StringAppendClient {
	return &stringAppendClient{cc}
}

func (c *stringAppendClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.StringAppend/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringAppendClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.StringAppend/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringAppend service

type StringAppendServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterStringAppendServer(s *grpc.Server, srv StringAppendServer) {
	s.RegisterService(&_StringAppend_serviceDesc, srv)
}

func _StringAppend_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StringAppendServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _StringAppend_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StringAppendServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _StringAppend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.StringAppend",
	HandlerType: (*StringAppendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _StringAppend_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _StringAppend_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for StringUpcase service

type StringUpcaseClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type stringUpcaseClient struct {
	cc *grpc.ClientConn
}

func NewStringUpcaseClient(cc *grpc.ClientConn) StringUpcaseClient {
	return &stringUpcaseClient{cc}
}

func (c *stringUpcaseClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.StringUpcase/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringUpcaseClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.StringUpcase/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringUpcase service

type StringUpcaseServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterStringUpcaseServer(s *grpc.Server, srv StringUpcaseServer) {
	s.RegisterService(&_StringUpcase_serviceDesc, srv)
}

func _StringUpcase_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StringUpcaseServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _StringUpcase_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StringUpcaseServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _StringUpcase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.StringUpcase",
	HandlerType: (*StringUpcaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _StringUpcase_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _StringUpcase_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for TestFail service

type TestFailClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type testFailClient struct {
	cc *grpc.ClientConn
}

func NewTestFailClient(cc *grpc.ClientConn) TestFailClient {
	return &testFailClient{cc}
}

func (c *testFailClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.larskluge.TestFail/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testFailClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.larskluge.TestFail/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestFail service

type TestFailServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterTestFailServer(s *grpc.Server, srv TestFailServer) {
	s.RegisterService(&_TestFail_serviceDesc, srv)
}

func _TestFail_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TestFailServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TestFail_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TestFailServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _TestFail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.larskluge.TestFail",
	HandlerType: (*TestFailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _TestFail_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestFail_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
