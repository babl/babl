// Code generated by protoc-gen-go.
// source: github.com/larskluge/babl/protobuf/modules/nneves/main.proto
// DO NOT EDIT!

/*
Package babl_nneves is a generated protocol buffer package.

It is generated from these files:
	github.com/larskluge/babl/protobuf/modules/nneves/main.proto

It has these top-level messages:
*/
package babl_nneves

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import babl "github.com/larskluge/babl/protobuf/messages"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ImageWatermark service

type ImageWatermarkClient interface {
	IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error)
	Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error)
}

type imageWatermarkClient struct {
	cc *grpc.ClientConn
}

func NewImageWatermarkClient(cc *grpc.ClientConn) ImageWatermarkClient {
	return &imageWatermarkClient{cc}
}

func (c *imageWatermarkClient) IO(ctx context.Context, in *babl.BinRequest, opts ...grpc.CallOption) (*babl.BinReply, error) {
	out := new(babl.BinReply)
	err := grpc.Invoke(ctx, "/babl.nneves.ImageWatermark/IO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageWatermarkClient) Ping(ctx context.Context, in *babl.Empty, opts ...grpc.CallOption) (*babl.Pong, error) {
	out := new(babl.Pong)
	err := grpc.Invoke(ctx, "/babl.nneves.ImageWatermark/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageWatermark service

type ImageWatermarkServer interface {
	IO(context.Context, *babl.BinRequest) (*babl.BinReply, error)
	Ping(context.Context, *babl.Empty) (*babl.Pong, error)
}

func RegisterImageWatermarkServer(s *grpc.Server, srv ImageWatermarkServer) {
	s.RegisterService(&_ImageWatermark_serviceDesc, srv)
}

func _ImageWatermark_IO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ImageWatermarkServer).IO(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ImageWatermark_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(babl.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ImageWatermarkServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ImageWatermark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babl.nneves.ImageWatermark",
	HandlerType: (*ImageWatermarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IO",
			Handler:    _ImageWatermark_IO_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ImageWatermark_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
