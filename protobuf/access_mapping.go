// Code generated by bin/module-mapping
// source: config.yml
// DO NOT EDIT!

package babl

import (
	grpc "google.golang.org/grpc"

	angusmcleod "github.com/larskluge/babl/protobuf/modules/angusmcleod"
	jangler "github.com/larskluge/babl/protobuf/modules/jangler"
	larskluge "github.com/larskluge/babl/protobuf/modules/larskluge"
	mondoreale "github.com/larskluge/babl/protobuf/modules/mondoreale"
	omnisyle "github.com/larskluge/babl/protobuf/modules/omnisyle"
	snd "github.com/larskluge/babl/protobuf/modules/snd"
)


var Modules = map[string]Component{
	"angusmcleod/coolest-module-ever": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(angusmcleod.NewCoolestModuleEverClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			angusmcleod.RegisterCoolestModuleEverServer(s, srv)
		},
  },
	"jangler/brandon-test": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(jangler.NewBrandonTestClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			jangler.RegisterBrandonTestServer(s, srv)
		},
  },
	"larskluge/babl-build": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBablBuildClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBablBuildServer(s, srv)
		},
  },
	"larskluge/babl-ci": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBablCiClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBablCiServer(s, srv)
		},
  },
	"larskluge/babl-deploy": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBablDeployClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBablDeployServer(s, srv)
		},
  },
	"larskluge/babl-init-module": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBablInitModuleClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBablInitModuleServer(s, srv)
		},
  },
	"larskluge/bablbot": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBablbotClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBablbotServer(s, srv)
		},
  },
	"larskluge/bar": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBarClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBarServer(s, srv)
		},
  },
	"larskluge/baz": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewBazClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterBazServer(s, srv)
		},
  },
	"larskluge/check-babl": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewCheckBablClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterCheckBablServer(s, srv)
		},
  },
	"larskluge/check-babl3": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewCheckBabl3Client(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterCheckBabl3Server(s, srv)
		},
  },
	"larskluge/download": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewDownloadClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterDownloadServer(s, srv)
		},
  },
	"larskluge/foo": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewFooClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterFooServer(s, srv)
		},
  },
	"larskluge/hi": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewHiClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterHiServer(s, srv)
		},
  },
	"larskluge/image-resize": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewImageResizeClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterImageResizeServer(s, srv)
		},
  },
	"larskluge/loyalist-designer-uploads": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewLoyalistDesignerUploadsClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterLoyalistDesignerUploadsServer(s, srv)
		},
  },
	"larskluge/loyalist-prep-prints": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewLoyalistPrepPrintsClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterLoyalistPrepPrintsServer(s, srv)
		},
  },
	"larskluge/loyalist-print-images": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewLoyalistPrintImagesClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterLoyalistPrintImagesServer(s, srv)
		},
  },
	"larskluge/loyalist-product-image": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewLoyalistProductImageClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterLoyalistProductImageServer(s, srv)
		},
  },
	"larskluge/loyalist-team-banner": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewLoyalistTeamBannerClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterLoyalistTeamBannerServer(s, srv)
		},
  },
	"larskluge/martin": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewMartinClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterMartinServer(s, srv)
		},
  },
	"larskluge/render-website": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewRenderWebsiteClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterRenderWebsiteServer(s, srv)
		},
  },
	"larskluge/s3": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewS3Client(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterS3Server(s, srv)
		},
  },
	"larskluge/sleep": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewSleepClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterSleepServer(s, srv)
		},
  },
	"larskluge/stream": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewStreamClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterStreamServer(s, srv)
		},
  },
	"larskluge/string-append": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewStringAppendClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterStringAppendServer(s, srv)
		},
  },
	"larskluge/string-upcase": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewStringUpcaseClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterStringUpcaseServer(s, srv)
		},
  },
	"larskluge/test-fail": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(larskluge.NewTestFailClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			larskluge.RegisterTestFailServer(s, srv)
		},
  },
	"mondoreale/text-to-image": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(mondoreale.NewTextToImageClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			mondoreale.RegisterTextToImageServer(s, srv)
		},
  },
	"omnisyle/official-module": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(omnisyle.NewOfficialModuleClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			omnisyle.RegisterOfficialModuleServer(s, srv)
		},
  },
	"omnisyle/test": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(omnisyle.NewTestClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			omnisyle.RegisterTestServer(s, srv)
		},
  },
	"omnisyle/test2private": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(omnisyle.NewTest2PrivateClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			omnisyle.RegisterTest2PrivateServer(s, srv)
		},
  },
	"snd/hello-world": Component{
		Client: func(cc *grpc.ClientConn) BinaryClient {
			return BinaryClient(snd.NewHelloWorldClient(cc))
		},
		Server: func(s *grpc.Server, srv BinaryServer) {
			snd.RegisterHelloWorldServer(s, srv)
		},
  },
}
